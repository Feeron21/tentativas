import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from ttkbootstrap.tooltip import ToolTip
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import sys
import re
import threading

# URL do site
URL = 'https://portaldocliente.motociclo.com.br/entrar'

# Variáveis globais para controle de execução
executando = False
ultimo_cnpj_enviado = ""

def fechar_popup(driver):
    """Tenta fechar o pop-up no site."""
    try:
        wait = WebDriverWait(driver, 10)
        botao_fechar_popup = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@class="popup-close"]')))
        botao_fechar_popup.click()
        print("Pop-up fechado com sucesso.")
    except TimeoutException:
        print("Nenhum pop-up encontrado ou erro ao fechar o pop-up.")

def automatizar_cnpj(cnpj):
    """Automatiza o processo de envio de CNPJ no site."""
    driver = webdriver.Chrome()
    driver.get(URL)
    try:
        fechar_popup(driver)
        wait = WebDriverWait(driver, 10)
        input_cnpj = wait.until(EC.visibility_of_element_located((By.NAME, 'cnpj')))
        input_cnpj.send_keys(cnpj)
        botao_aceitar = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "Aceito")]')))
        botao_aceitar.click()
        botao_avancar = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "Avançar")]')))
        botao_avancar.click()
        
        # Verifica se há mensagem de erro "Cliente não existente"
        try:
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'Cliente não existente')]"))
            )
            return False, "Cliente não existente"
        except TimeoutException:
            return True, "Sucesso"
        
    except TimeoutException as e:
        print(f"Erro: {str(e)}. O elemento demorou para aparecer ou não está clicável.")
        return False, "Timeout"
    except Exception as e:
        print(f"Ocorreu um erro ao processar o CNPJ {cnpj}: {str(e)}")
        return False, str(e)
    finally:
        time.sleep(3)
        driver.quit()

def formatar_cnpj(cnpj):
    """Formata o CNPJ para o padrão XX.XXX.XXX/XXXX-XX."""
    cnpj = re.sub(r'\D', '', cnpj)
    if len(cnpj) == 14:
        return f"{cnpj[:2]}.{cnpj[2:5]}.{cnpj[5:8]}/{cnpj[8:12]}-{cnpj[12:]}"
    return cnpj

def validar_cnpj(cnpj):
    """Valida se o CNPJ está no formato correto."""
    return re.match(r'^\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}$', cnpj) is not None

def processar_cnpjs():
    """Processa a lista de CNPJs inseridos pelo usuário."""
    global executando, ultimo_cnpj_enviado
    executando = True
    cnpjs = text_cnpjs.get("1.0", "end").strip().split('\n')
    if not cnpjs:
        mostrar_mensagem("Por favor, insira pelo menos um CNPJ.", "Entrada Inválida", "warning")
        executando = False
        janela.after(0, habilitar_botoes)
        return

    enviados_sucesso = []
    erros = []
    total = len(cnpjs)

    for i, cnpj in enumerate(cnpjs, 1):
        if not executando:
            break

        cnpj = formatar_cnpj(cnpj.strip())
        if validar_cnpj(cnpj):
            sucesso, mensagem = automatizar_cnpj(cnpj)
            if sucesso:
                enviados_sucesso.append(cnpj)
                ultimo_cnpj_enviado = cnpj
                janela.after(0, atualizar_status, f"Enviando: {i}/{total} - Sucesso: {cnpj}")
                janela.after(0, atualizar_ultimo_cnpj, f"Último CNPJ enviado: {cnpj}")
            else:
                erros.append(f"{cnpj} - {mensagem}")
                janela.after(0, atualizar_status, f"Enviando: {i}/{total} - Erro: {cnpj} - {mensagem}")
        else:
            erros.append(f"{cnpj} - Formato incorreto")
            janela.after(0, atualizar_status, f"Enviando: {i}/{total} - Formato inválido: {cnpj}")

        progresso = (i / total) * 100
        janela.after(0, atualizar_progresso, progresso)

    mensagem_final = gerar_relatorio(enviados_sucesso, erros)
    janela.after(0, mostrar_confirmacao, mensagem_final, "Relatório de Envio")
    janela.after(0, atualizar_status, "Envio concluído")
    janela.after(0, habilitar_botoes)
    executando = False

def gerar_relatorio(enviados_sucesso, erros):
    """Gera o relatório final do processamento dos CNPJs."""
    mensagem_final = ""
    if enviados_sucesso:
        ultimo_cnpj = enviados_sucesso[-1]
        mensagem_final += f"CNPJs enviados com sucesso: {len(enviados_sucesso)}\n"
        mensagem_final += f"Último CNPJ enviado: {ultimo_cnpj}\n\n"
    else:
        mensagem_final += "Nenhum CNPJ foi enviado com sucesso.\n\n"

    if erros:
        mensagem_final += f"CNPJs com erro ({len(erros)}):\n"
        mensagem_final += "\n".join(erros)

    if not executando:
        mensagem_final = "Envio interrompido pelo usuário.\n\n" + mensagem_final

    return mensagem_final

def enviar_cnpjs():
    """Inicia o processo de envio dos CNPJs."""
    desabilitar_botoes()
    atualizar_status("Iniciando envio...")
    atualizar_progresso(0)
    threading.Thread(target=processar_cnpjs, daemon=True).start()

def parar_processamento():
    """Interrompe o processamento dos CNPJs."""
    global executando
    executando = False
    atualizar_status("Interrompendo envio...")
    botao_parar.configure(state="disabled")

def mostrar_mensagem(mensagem, titulo, tipo_msg):
    """Exibe uma mensagem para o usuário."""
    if tipo_msg == "info":
        ttk.dialogs.Messagebox.show_info(mensagem, titulo)
    elif tipo_msg == "error":
        ttk.dialogs.Messagebox.show_error(mensagem, titulo)
    elif tipo_msg == "warning":
        ttk.dialogs.Messagebox.show_warning(mensagem, titulo)

def mostrar_confirmacao(mensagem, titulo):
    """Exibe uma janela de confirmação com o relatório de envio."""
    janela_confirmacao = ttk.Toplevel(janela)
    janela_confirmacao.title(titulo)
    janela_confirmacao.geometry("500x300")
    janela_confirmacao.attributes('-topmost', True)

    frame = ttk.Frame(janela_confirmacao, padding=20)
    frame.pack(expand=True, fill="both")

    texto_widget = ttk.Text(frame, wrap="word", width=60, height=10)
    texto_widget.pack(expand=True, fill="both", pady=(0, 10))
    texto_widget.insert("1.0", mensagem)
    texto_widget.configure(state="disabled")

    scrollbar = ttk.Scrollbar(frame, orient="vertical", command=texto_widget.yview)
    scrollbar.pack(side="right", fill="y")
    texto_widget.configure(yscrollcommand=scrollbar.set)

    botao_ok = ttk.Button(frame, text="OK", command=janela_confirmacao.destroy, width=10)
    botao_ok.pack()

def sair():
    """Encerra o programa."""
    janela.destroy()
    sys.exit()

def alternar_modo():
    """Alterna entre o modo claro e escuro."""
    if janela.style.theme.name == "darkly":
        janela.style.theme_use("litera")
        botao_alternar.configure(text="Modo Escuro")
    else:
        janela.style.theme_use("darkly")
        botao_alternar.configure(text="Modo Claro")
    atualizar_cores_ui()

def atualizar_cores_ui():
    """Atualiza as cores da interface de acordo com o tema atual."""
    cor_bg = janela.style.colors.get("bg")
    cor_fg = janela.style.colors.get("fg")
    cor_input = janela.style.colors.get("inputbg")
    
    frame_principal.configure(style="TFrame")
    text_cnpjs.configure(bg=cor_input, fg=cor_fg)
    barra_status.configure(background=cor_bg, foreground=cor_fg)

def limpar_cnpjs():
    """Limpa a lista de CNPJs inseridos."""
    text_cnpjs.delete("1.0", "end")
    atualizar_progresso(0)
    atualizar_status("CNPJs limpos")
    atualizar_ultimo_cnpj("")
    verificar_conteudo_textbox()

def atualizar_status(mensagem):
    """Atualiza a mensagem de status na interface."""
    barra_status.configure(text=mensagem)

def atualizar_progresso(valor):
    """Atualiza a barra de progresso e o rótulo de porcentagem."""
    barra_progresso['value'] = valor
    rotulo_progresso.configure(text=f"{valor:.1f}%")

def atualizar_ultimo_cnpj(mensagem):
    """Atualiza o rótulo com o último CNPJ enviado."""
    rotulo_ultimo_cnpj.configure(text=mensagem)

def desabilitar_botoes():
    """Desabilita os botões durante o processamento."""
    botao_enviar.configure(state="disabled")
    botao_limpar.configure(state="disabled")
    botao_parar.configure(state="normal")

def habilitar_botoes():
    """Habilita os botões após o processamento."""
    botao_limpar.configure(state="normal")
    botao_parar.configure(state="disabled")
    verificar_conteudo_textbox()

def verificar_conteudo_textbox(event=None):
    """Verifica se há conteúdo no textbox e habilita/desabilita o botão de enviar."""
    if text_cnpjs.get("1.0", "end").strip():
        botao_enviar.configure(state="normal")
    else:
        botao_enviar.configure(state="disabled")

def formatar_entrada_cnpj(event=None):
    """Formata os CNPJs inseridos no textbox."""
    conteudo = text_cnpjs.get("1.0", "end-1c")
    linhas = conteudo.split('\n')
    linhas_formatadas = [formatar_cnpj(linha.strip()) for linha in linhas]
    conteudo_formatado = '\n'.join(linhas_formatadas)
    text_cnpjs.delete("1.0", "end")
    text_cnpjs.insert("1.0", conteudo_formatado)

# Configuração da Interface do Usuário
janela = ttk.Window(themename="darkly")
janela.title("Envio Automático de CNPJs")
janela.geometry("700x500")

estilo = ttk.Style()

# Frame principal
frame_principal = ttk.Frame(janela, padding=20)
frame_principal.pack(fill="both", expand=True)

# Título
rotulo_titulo = ttk.Label(frame_principal, text="Envio Automático de CNPJs", font=("Helvetica", 20, "bold"))
rotulo_titulo.pack(pady=(0, 15))

# Entrada de CNPJs
rotulo_cnpjs = ttk.Label(frame_principal, text="Insira os CNPJs (um por linha):", font=("Helvetica", 12))
rotulo_cnpjs.pack(pady=(0, 5))

text_cnpjs = ttk.Text(frame_principal, height=8, width=45, font=("Helvetica", 11))
text_cnpjs.pack(pady=(0, 10), fill="both", expand=True)
text_cnpjs.bind("<KeyRelease>", verificar_conteudo_textbox)
text_cnpjs.bind("<FocusOut>", formatar_entrada_cnpj)

# Frame de botões
frame_botoes = ttk.Frame(frame_principal)
frame_botoes.pack(pady=5)

botao_enviar = ttk.Button(frame_botoes, text="Enviar CNPJs", command=enviar_cnpjs, state="disabled", width=15)
botao_enviar.pack(side="left", padx=5)
ToolTip(botao_enviar, text="Iniciar o envio dos CNPJs")

botao_parar = ttk.Button(frame_botoes, text="Parar", command=parar_processamento, state="disabled", width=15)
botao_parar.pack(side="left", padx=5)
ToolTip(botao_parar, text="Interromper o envio")

botao_limpar = ttk.Button(frame_botoes, text="Limpar", command=limpar_cnpjs, width=15)
botao_limpar.pack(side="left", padx=5)
ToolTip(botao_limpar, text="Limpar a lista de CNPJs")

# Frame de progresso
frame_progresso = ttk.Frame(frame_principal)
frame_progresso.pack(pady=10)

barra_progresso = ttk.Progressbar(frame_progresso, length=300, mode='determinate', style="info.Horizontal.TProgressbar")
barra_progresso.pack(side="left")

rotulo_progresso = ttk.Label(frame_progresso, text="0.0%", font=("Helvetica", 10))
rotulo_progresso.pack(side="left", padx=(5, 0))

# Rótulo do último CNPJ enviado
rotulo_ultimo_cnpj = ttk.Label(frame_principal, text="", font=("Helvetica", 10))
rotulo_ultimo_cnpj.pack(pady=5)

# Barra de status
barra_status = ttk.Label(frame_principal, text="Pronto para enviar CNPJs", font=("Helvetica", 10))
barra_status.pack(pady=5)

# Frame inferior para botões de alternar modo e sair
frame_inferior = ttk.Frame(frame_principal)
frame_inferior.pack(side="bottom", fill="x", pady=(10, 0))

# Botão de alternar modo
botao_alternar = ttk.Button(frame_inferior, text="Modo Claro", command=alternar_modo, width=15)
botao_alternar.pack(side="left")
ToolTip(botao_alternar, text="Alternar entre modo claro e escuro")

# Botão de sair
botao_sair = ttk.Button(frame_inferior, text="Sair", command=sair, width=15)
botao_sair.pack(side="right")
ToolTip(botao_sair, text="Sair do programa")

# Atualizar cores da interface
atualizar_cores_ui()

# Iniciar o loop da interface gráfica
janela.mainloop()
